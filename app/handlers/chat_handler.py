from aiogram import Router, F
from aiogram.types import Message
from services.openrouter_service import get_openrouter_response
from services.silero_service import synthesize_speech
from database import get_db
from models.user import User, Subscription

router = Router()

@router.message(F.text & ~F.text.startswith("üîä") & ~F.text.startswith("üíé"))
async def handle_chat_message(message: Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user.message_count += 1
    db.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–ºÊòØÂê¶ÈúÄË¶Å –ø–æ–¥–ø–∏—Å–∫—É
    requires_subscription = user.message_count >= 15
    
    if requires_subscription:
        subscription = db.query(Subscription).filter(
            Subscription.user_id == user.id, 
            Subscription.is_active == True
        ).first()
        
        if not subscription:
            await message.answer(
                "‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (15).\n"
                "üíé –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É:\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /premium –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Open Router —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    ai_response = await get_openrouter_response(user.id, message.text)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–∑–≤—É—á–∫—É
    if requires_subscription and subscription:
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
        audio_path = await synthesize_speech(ai_response, user.voice_model)
        
        await message.answer(ai_response)
        await message.answer_audio(audio=open(audio_path, 'rb'))
    else:
        await message.answer(ai_response)