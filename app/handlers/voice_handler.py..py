from aiogram import Router, F
from aiogram.types import Message
from services.silero_service import synthesize_speech
from database import get_db
from models.user import User

router = Router()

@router.message(F.text.startswith("üîä"))
async def handle_voice_choice(message: Message):
    voice_map = {
        "üîä –ì–æ–ª–æ—Å 1 (Aidar)": "aidar",
        "üîä –ì–æ–ª–æ—Å 2 (Baya)": "baya", 
        "üîä –ì–æ–ª–æ—Å 3 (Kseniya)": "kseniya"
    }
    
    selected_voice = voice_map.get(message.text)
    if selected_voice:
        db = next(get_db())
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if user:
            user.voice_model = selected_voice
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞ –≤–∞—à–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞."
            audio_path = await synthesize_speech(test_text, selected_voice)
            
            await message.answer_audio(
                audio=open(audio_path, 'rb'),
                caption=f"‚úÖ –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_voice}\n\n–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
            )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")